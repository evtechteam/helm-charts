{{- range $name, $overrides := .Values.instances }}
{{- $settings := mustMergeOverwrite (dict) (deepCopy $.Values.defaults) $overrides}}
{{- $ctx := dict "name" $name "Release" $.Release "Values" $.Values }}
{{- $resourceName := include "node-red-gitops.resourceName" $ctx }}
{{- $ingressHost := "" }}
{{- if $settings.ingress.enabled }}
  {{- if $settings.ingress.template }}
    {{- $ingressHost = tpl $settings.ingress.template (dict "name" $name "ingress" $settings.ingress "Template" $.Template "Release" $.Release) }}
  {{- else }}
    {{- $ingressHost = ($settings.ingress.hostname | default (printf "%s%s" $name $settings.ingress.suffix)) }}
  {{- end }}
{{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: '{{ $resourceName }}'
  labels:
    app.kubernetes.io/instance: '{{ $name }}'
    app.kubernetes.io/name: '{{ $resourceName }}'
spec:
  replicas: {{ $settings.replicas }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: '{{ $name }}'
      app.kubernetes.io/name: '{{ $resourceName }}'
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: '{{ $name }}'
        app.kubernetes.io/name: '{{ $resourceName }}'
    spec:
      containers:
        - env:
            # Automatic metadata environment variables
            - name: INSTANCE_NAME
              value: "{{ $name }}"
            - name: RELEASE_NAME
              value: "{{ $.Release.Name }}"
            - name: DEPLOYMENT_NAME
              value: "{{ $resourceName }}"
            {{- if $ingressHost }}
            - name: INGRESS_HOST
              value: "{{ $ingressHost }}"
            - name: INGRESS_URL
              value: "https://{{ $ingressHost }}"
            {{- end }}
            # Node-RED configuration
            - name: FLOWS
              value: {{ $settings.flows | default "flows.json" }}
            - name: TZ
              value: "{{ $settings.timezone | default "UTC" }}"
            - name: NODE_RED_ENABLE_PROJECTS
              value: {{ $settings.projects.enabled | quote }}
            {{- if and $settings.projects.enabled $settings.projects.secrets $settings.projects.secrets.CREDENTIAL_SECRET }}
            - name: CREDENTIAL_SECRET
              valueFrom:
                secretKeyRef:
                  name: "{{ include "node-red-gitops.secretName" $ctx }}"
                  key: CREDENTIAL_SECRET
            {{- end }}
            {{- range $key, $value := $settings.secrets }}
            - name: {{ $key }}
              valueFrom:
                secretKeyRef:
                  name: "{{ include "node-red-gitops.secretName" $ctx }}"
                  key: {{ $key }}
            {{- end }}
            - name: NODE_RED_ENABLE_SAFE_MODE
              value: {{ $settings.safe_mode | default "false" | quote }}
            - name: NODE_PATH
              value: /usr/src/node-red/node_modules:/data/node_modules
            # Custom environment variables
            {{- range $key, $value := $settings.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}

          image: {{ $settings.image | default "nodered/node-red" }}:{{ $settings.tag | default "latest" }}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 0
            periodSeconds: 10
            tcpSocket:
              port: 1880
            timeoutSeconds: 1
          name: '{{ $resourceName }}'
          # args: ["--userDir", "/data"]
          ports:
            - containerPort: 1880
              name: http
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 0
            periodSeconds: 10
            tcpSocket:
              port: 1880
            timeoutSeconds: 1
          startupProbe:
            failureThreshold: 30
            initialDelaySeconds: 0
            periodSeconds: 5
            tcpSocket:
              port: 1880
            timeoutSeconds: 1
          volumeMounts:
            - mountPath: /data
              name: data
{{- if and $settings.codeServer.enabled (eq $settings.codeServer.mode "simple") }}
        # Simple mode: standalone code-server sidecar
        - name: code-server
          image: {{ $settings.codeServer.image }}:{{ $settings.codeServer.tag }}
          imagePullPolicy: IfNotPresent
          env:
            - name: PASSWORD
              value: {{ $settings.codeServer.password | quote }}
            {{- range $key, $value := $settings.codeServer.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          ports:
            - containerPort: {{ $settings.codeServer.port }}
              name: code-server
              protocol: TCP
          startupProbe:
            httpGet:
              path: /healthz
              port: {{ $settings.codeServer.port }}
            failureThreshold: 30
            periodSeconds: 5
            initialDelaySeconds: 0
            timeoutSeconds: 1
          readinessProbe:
            httpGet:
              path: /healthz
              port: {{ $settings.codeServer.port }}
            failureThreshold: 3
            periodSeconds: 10
            initialDelaySeconds: 0
            timeoutSeconds: 1
          livenessProbe:
            httpGet:
              path: /healthz
              port: {{ $settings.codeServer.port }}
            failureThreshold: 3
            periodSeconds: 10
            initialDelaySeconds: 0
            timeoutSeconds: 1
          volumeMounts:
            - mountPath: /data
              name: data
          {{- if $settings.codeServer.resources }}
          resources:
            {{- toYaml $settings.codeServer.resources | nindent 12 }}
          {{- end }}
{{- end }}
{{- if and $settings.codeServer.enabled (eq $settings.codeServer.mode "devcontainer") }}
        # Devcontainer mode: envbuilder builds and runs code-server inside devcontainer
        - name: code-server
          image: {{ $settings.codeServer.devcontainer.envbuilderImage }}:{{ $settings.codeServer.devcontainer.envbuilderTag }}
          imagePullPolicy: IfNotPresent
          env:
            {{- if $settings.codeServer.devcontainer.gitUrl }}
            - name: ENVBUILDER_GIT_URL
              value: {{ $settings.codeServer.devcontainer.gitUrl }}
            - name: ENVBUILDER_GIT_BRANCH
              value: {{ $settings.codeServer.devcontainer.gitBranch | default "main" }}
            {{- else if $settings.codeServer.devcontainer.config }}
            - name: ENVBUILDER_DEVCONTAINER_DIR
              value: /devcontainer-config
            {{- else }}
            - name: ENVBUILDER_DEVCONTAINER_DIR
              value: /data/.devcontainer
            {{- end }}
            - name: ENVBUILDER_WORKSPACE_FOLDER
              value: {{ $settings.codeServer.devcontainer.workspaceFolder }}
            - name: ENVBUILDER_CACHE_DIR
              value: /tmp/envbuilder-cache
            {{- if $settings.codeServer.devcontainer.cacheRepo }}
            - name: ENVBUILDER_CACHE_REPO
              value: {{ $settings.codeServer.devcontainer.cacheRepo }}
            {{- end }}
            - name: ENVBUILDER_FALLBACK_IMAGE
              value: {{ $settings.codeServer.image | default "codercom/code-server" }}:{{ $settings.codeServer.tag | default "latest" }}
            - name: ENVBUILDER_INIT_SCRIPT
              value: "{{ if $settings.codeServer.devcontainer.config }}/devcontainer-config/setup-vscode.sh && {{ end }}code-server --bind-addr 0.0.0.0:{{ $settings.codeServer.port }} --auth password {{ $settings.codeServer.devcontainer.workspaceFolder }}"
            - name: PASSWORD
              value: {{ $settings.codeServer.password | quote }}
            {{- range $key, $value := $settings.codeServer.devcontainer.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          ports:
            - containerPort: {{ $settings.codeServer.port }}
              name: code-server
              protocol: TCP
          volumeMounts:
            - mountPath: /data
              name: data
            - mountPath: /tmp/envbuilder-cache
              name: envbuilder-cache
            {{- if $settings.codeServer.devcontainer.config }}
            - mountPath: /devcontainer-config
              name: vscode-setup-scripts
            {{- end }}
          {{- if $settings.codeServer.devcontainer.resources }}
          resources:
            {{- toYaml $settings.codeServer.devcontainer.resources | nindent 12 }}
          {{- end }}
          securityContext:
            runAsUser: 0
            runAsGroup: 0
{{- end }}
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      serviceAccountName: default
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000

      volumes:
        - name: data
{{- if $settings.persistence.enabled }}
          persistentVolumeClaim:
            claimName: '{{ $resourceName }}'
{{- else }}
          emptyDir: {}
{{- end }}
{{- if and $settings.codeServer.enabled (eq $settings.codeServer.mode "devcontainer") }}
        - name: envbuilder-cache
          emptyDir: {}
        {{- if $settings.codeServer.devcontainer.config }}
        - name: vscode-setup-scripts
          configMap:
            name: '{{ $name }}-{{ $.Release.Name }}-vscode-setup'
            defaultMode: 0755
        {{- end }}
{{- end }}

{{- if or $settings.projects.secrets $settings.secrets }}
        - name: secrets
          secret:
            defaultMode: 292
            secretName: "{{ include "node-red-gitops.secretName" $ctx }}"
{{- end }}

{{- if $settings.projects.enabled }}
      initContainers:
        - name: projects-init
          image: {{ $settings.image | default "nodered/node-red" }}:{{ $settings.tag | default "latest" }}
          command:
            - "sh"
            - "-c"
            - |
              /bin/sh <<'EOF'
              set -e

            {{- if $settings.projects.secrets }}
              # Copy in SSH Credentials
              mkdir -p ~/.ssh
              cp /etc/secrets/ssh ~/.ssh/id_rsa
              cp /etc/secrets/ssh_pub ~/.ssh/id_rsa.pub
              cat /etc/secrets/known_hosts > ~/.ssh/known_hosts
              chmod 0400 ~/.ssh/*
            {{- end }}

              #chown -R 1000:1000 "$GIT_SYNC_ROOT/$GIT_SYNC_DEST"

              git config --global --add safe.directory /data

            {{- if $settings.projects.base.repo }}
              # Clone/Update Base Repo
              if [ -d "/data/.git" ]; then
                cd "/data"
                git stash push --include-untracked
                git pull --no-rebase
                git stash drop || true
              else
                git clone --single-branch --branch "{{ $settings.projects.base.branch | default "main" }}" -- "{{ tpl $settings.projects.base.repo (dict "name" $name "projects" $settings.projects "Template" $.Template "Release" $.Release) }}" "/data"
              fi
            {{- end }}



            {{- if $settings.projects.url }}
              # Clone/Update Project Repo
              if [ -d "/data/projects/Project/.git" ]; then
                cd "/data/projects/Project"
                git stash push --include-untracked
                git pull --no-rebase
              else
                mkdir -p "/data/projects/Project"
                git clone --single-branch --branch "{{ $settings.projects.branch | default "main" }}" -- "{{ tpl $settings.projects.url (dict "name" $name "projects" $settings.projects "Template" $.Template "Release" $.Release) }}" "/data/projects/Project"
              fi

              # Setup NPM packages from project's package.json file
              cd /data
              cp projects/Project/package.json .
              npm install
            {{- end }}

            {{- if $settings.projects.secrets }}
              mkdir -p /data/projects/.sshkeys
              cp /etc/secrets/ssh /data/projects/.sshkeys/__default_git
              cp /etc/secrets/ssh_pub /data/projects/.sshkeys/__default_git.pub
              chmod 0400 /data/projects/.sshkeys/__default_git*

              sed -i 's|\$CREDENTIAL_SECRET|'$CREDENTIAL_SECRET'|g' /data/.config.projects.json
            {{- end }}

              EOF
          volumeMounts:
            - mountPath: /data
              name: data
          {{- if $settings.projects.secrets }}
            - name: secrets
              mountPath: "/etc/secrets"
          {{- end }}
          env:
            {{- if $settings.projects.secrets }}
            - name: CREDENTIAL_SECRET
              valueFrom:
                secretKeyRef:
                  name: "{{ include "node-red-gitops.secretName" $ctx }}"
                  key: CREDENTIAL_SECRET
            {{- end }}
            - name: NODE_PATH
              value: /usr/src/node-red/node_modules:/data/node_modules
{{- end }}

{{- end -}}
